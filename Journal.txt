Tuesday, April 1, 2025
======================

* Thought about pushing up to the base class, the apply-loop over events in the concrete subclass,
  but then we're running the apply method inside the super-constructor, which may cause issues
  (which may be "fixed" with the upcoming "flexible constructor bodies" JEP?)

* Instead of using switch+pattern matching for apply(), create dedicated (overloaded) apply methods for each concrete event type, however the dispatching of the events based on their concrete type would require either reflection or use of a switch anyway

[Alternative Implementation]
* Instead of a Use Case in the Application package, make self-contained Command objects that get executed by the boundary adapter


Monday, March 31, 2025
======================

* Two ways to create a Concert Aggregate Root:

  1. schedule (static factory method) -- could also be a separate Factory class, if we need more control (passing in dependencies to the aggregate root)

  2. reconstitute (apply events from the event store)

[Junie]
* When I asked it to add parameters to the Concert constructor, it did stuff and then wanted to run the ConcertTest to ensure everything is working. HOWEVER, it didn't check that this test was failing before and its changes might not have been enough to get it to passâ€”which would not have been Junie's fault!

[Junie]
* How to more easily reference line(s) of code in a specific file (e.g., a specific test method) when asking Junie to do something

[IntelliJ IDEA]
* Didn't offer to select the entire switch statement when doing Extract Method

* In "Commands Generate Events" tests, the SETUP creates events and uses reconstitute (does not itself call Commands)
