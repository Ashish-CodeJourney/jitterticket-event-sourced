Monday, April 21, 2025
======================

[Caution]
* Still easy to mix up newly created Aggregates: reconstituted from events (which results in empty uncommittedEvents) vs. registered via command (which results in a single event in uncommittedEvents), the latter which is required for saving.
  Unsure how to better protect against these kinds of mistakes: perhaps a createForTestWithEmptyUncommittedEvents() method on Customer (or whatever Aggregate)?

[IntelliJ IDEA: Feature]
[ ] Ability to exclude a replacement from the replace dialog (it's available in the replace tool window, so why not the dialog?)

[IntelliJ IDEA Bug]
[ ] Can't seem to use the Make Static refactoring on an extracted test setup helper method. Check to see if it's still broken in 2025.1. Check if issue was already filed?

[IntelliJ IDEA: Feature]
[ ] When moving (static) methods, would like to be able to move to a new static nested class (right now it tries to create a new package)

[IntelliJ IDEA: Bug?]
[ ] Getting error trying to launch JUnit in 2025.1 release.


Monday, April 14, 2025
======================

Next Time: tests against the purchaseTicketsUseCase that verify that uncommitted events from both Concert and Customer are generated


[Event-Sourcing]
* Concert can only generate ConcertEvents, and Customer can only generate CustomerEvents, so I can't assert (through ConcertTest) that the uncommitted events from Concert.purchaseTickets() generates a Customer-oriented TicketsPurchased event


Wednesday, April 9, 2025
========================

[Design Decision]
* For buying tickets, we don't think we need to load the Customer Aggregate, because Concert will generate the "TicketsReceived" event on the Customer's behalf

    * To display the ticket order confirmation, we load the Customer,
      then ask the Customer for the TicketOrder associated with the TicketOrderId

[IntelliJ IDEA Bug]
* F6 Move: when the method isn't static, it prompts to make static and THEN move, so makes it static, but then does NOT continue with the move operation

[Junie]
* What's the problem with the (default) IntelliJ Light theme that it complains about?

  > Current theme IntelliJ Light may not be supported by Junie. If you encounter any issues, please change to a default theme and reopen the project.


Tuesday, April 8, 2025
======================

[Junie]
* (reminder to post feedback on tests that fail that aren't Junie's fault, i.e., they weren't passing before)

[IntelliJ IDEA]
* Recognize in a Thymeleaf HTML template that the input field _does_ have a label, but the "for" is a TH: variable (see buy-tickets.html's form)


Monday, April 7, 2025
=====================

[Spring Framework]
* MockMvcTester without any Spring configuration will use the default InternalResourceViewResolver, which prevents "dispatch loops" that don't actually make sense for the resolver (Thymeleaf) we use in production, but it's too painful to manually wire the ThymeleafResolver. Perhaps can configure the UrlBasedViewResolver which doesn't care about dispatch loops?

[Heuristic]
* Projected read-models should have all the information needed to render a customer/user-facing view

* Following from the heuristic above, for ease of conversion we're adding the Aggregate's IDs to the event objects themselves instead of pulling them from the "wrapper/envelope" EventDto that already has the Aggregate's ID.
  Later on we can do more work in EventDto, since the DTO already has the ID, when converting from the DTO back into the event via enrichment (and not store the ID in the JSON blob), but that's an optimization: not having duplicate information in the JSON that's already in the event record/row.


Thursday, April 3, 2025
=======================

Next Time: Modify ConcertProjector so that it has all the details needed to render the list of concerts available for a customer to buy a ticket for, which means adding additional fields to the projector


[Design]
* {per @Suigi} To start, we'll create an in-memory Projector that always loops over all existing events in order to derive the information it needs to provide (e.g., which concerts are in the future and have tickets remaining)

    * All EventStore instances (we need a separate instance per Aggregate type) eventually share a single EventDto-Repository (through which all events will flow on their way to a database), which could provide a single place for Projectors to tap into (and could specify the event types they're interested in).

* Learned a lot about generics in making EventStore generic

[Junie Issue: Fixed]
* When asking a question (instead of having it do work), the answers ended up in a markdown file instead of in its chat area.


Wednesday, April 2, 2025
========================

Next Time: Deal with "find all concerts that we can buy tickets for" in the BuyTicketsUseCase

[Decision]
* Aggregates now have IDs that are of type UUIDv7 instead of Long, because we can't rely on the database to generate IDs as there's not a 1:1 relationship between rows/records in a table and the Aggregate Entities.
  IDs will be assigned upon the first creation event for each domain aggregate.
  Using type 7 UUIDs as they can be time-ordered, which is probably useful for events (since they must be correctly ordered).

* Interesting issues while generifying the ConcertStore: was able to get most of the way there, but the reconstitution of the object (e.g., Concert) needs to be externalized by a factory-like/functional method that takes the Events and converts them to the AGGREGATE

* For easier understanding, create two stores: one specific (without Generics) to a type (e.g., CustomerStore), and then one that is generified, e.g., Store<...> (which is where ConcertStore is heading)


Tuesday, April 1, 2025
======================

* Thought about pushing up to the base class, the apply-loop over events in the concrete subclass,
  but then we're running the apply method inside the super-constructor, which may cause issues
  (which may be "fixed" with the upcoming "flexible constructor bodies" JEP?)

* Instead of using switch+pattern matching for apply(), create dedicated (overloaded) apply methods for each concrete event type, however the dispatching of the events based on their concrete type would require either reflection or use of a switch anyway

[Alternative Implementation]
* Instead of a Use Case in the Application package, make self-contained Command objects that get executed by the boundary adapter


Monday, March 31, 2025
======================

* Two ways to create a Concert Aggregate Root:

  1. schedule (static factory method) -- could also be a separate Factory class, if we need more control (passing in dependencies to the aggregate root)

  2. reconstitute (apply events from the event store)

[Junie]
* When I asked it to add parameters to the Concert constructor, it did stuff and then wanted to run the ConcertTest to ensure everything is working. HOWEVER, it didn't check that this test was failing before and its changes might not have been enough to get it to passâ€”which would not have been Junie's fault!

[Junie]
* How to more easily reference line(s) of code in a specific file (e.g., a specific test method) when asking Junie to do something

[IntelliJ IDEA]
* Didn't offer to select the entire switch statement when doing Extract Method

* In "Commands Generate Events" tests, the SETUP creates events and uses reconstitute (does not itself call Commands)
