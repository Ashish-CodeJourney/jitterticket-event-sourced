Tuesday, May 27, 2025
=====================
[Design Decision]
* Storing events for all aggregates in a single CSV file means that when reading them inside an event-specific store, we need to filter out those events that don't match the Store's event type (e.g., CustomerEvent).
  Solutions:
  1. Each store gets its own file (e.g., "customer-events.csv" and "concert-events.csv")
  2. Add a column in the CSV to indicate the event type (e.g., "ConcertEvent"), and then match that to the store's `eventClass` field (already defined)
  Decision: #1, as it required fewer changes and less data in the file

[IntelliJ IDEA Bug]
[ ] When it suggests an introduce variable refactoring, the keyboard focus isn't on the dropdown (for "Replace ...")
    Example code:
    ```
            var concertStore = CsvStringsEventStore.forConcerts(
                    new CsvReaderAppender(Path.of(eventsFilePath)));
            if (Files.exists(Path.of(eventsFilePath))) {
                return concertStore;
            }
    ```


Wednesday, May 21, 2025
=======================

[JUnit Feedback]
[ ] Is there a way to use @ParameterizedClass such that it supplies a new instance of the argument(s) for each individual test method? So instead of writing the same @ParameterizedTest+@MethodSource for each test method, I can specify it once for the whole class? (See EventStoreTest for an example.)

[IntelliJ IDEA Feedback]
[ ] (1:10pm) When extracting delegate, it leaves behind methods that are no longer used.
    See CsvFileEventStore when delegating the csvLines to a new class.


Thursday, May 1, 2025
=====================
[AI Assistant]
[ ] When typing a prompt inline, (accidentally?) hitting the up/down arrow throws away what was typed, replacing it with the history!


Wednesday, April 30, 2025
=========================
* Once again, found an incorrect URL during manual testing, which means I probably want to move the URL generation to the back-end to make it easier to test


Tuesday, April 29, 2025
=======================

[IntelliJ IDEA Bug/Missing Feature?]
* Viewing Parameter Info on a Record Deconstruction Pattern in a switch block doesn't show anything
* When refactoring to Migrate Type in a Record component (property), it did not migrate the type in the switch pattern deconstruction for those records (e.g., Long eventSequence to Integer)
* Type migration of List<EVENT> to Stream<EVENT> messed up the tests that were using concrete types, so it changed List<ConcertEvent> to Stream<EVENT>!


Monday, April 28, 2025
======================

[Design Decision]
* Where to update/increment the EVENT SEQUENCE Number?
    1. Update it on-the-fly during storage in the EventStore
        This would be annoying, because Events are Records, so would have to create a new record, copying over most of the information, with the new record having the correct sequence. This would be difficult, because each Event record is different, so each Event would need a "wither" for updating the sequence.
    ✅2. Increment/track it in the EventSourcedAggregate:
        This is probably the place to do it, since the aggregate can retain the "high water mark" of event sequence numbers and hand them out when the events are created by the Aggregate.
    => It's very annoying to use Records for the event objects themselves, because we can't easily update the event sequence number (nor the aggregate ID), so have to have those numbers/IDs at the time the aggregate creates & enqueues the events. If they were classes, the base EventSourcedAggregate could assign those values.

[Design Decision]
* Need to store a Concert from its events (for testing, when I need to be explicit about the events, e.g., in the test `projectsStateOnlyThroughSelectedEvent`), but if we want to create/store from events, we either need to:
    1. Create an alternate way of instantiating the Concert from events so they also get enqueued (to end up in the uncommittedEvents list), otherwise the EventStore can't save it (reconstituted Concerts have no uncommitted events), or
    2. Add a method to EventStore that takes the list of events directly, instead of from the Aggregate.
  (1) is painful because creating an alternate constructor that enqueues and doesn't just apply is very awkward (because there's already a constructor that takes a list of events—HOWEVER, we could change the constructor to be a no-arg constructor and do the apply() in the static reconstitute method). In addition, we're creating the Concert aggregate, but only using it as a container for the uncommitted events, so it's a bit of a waste to apply the events when we don't care about the state of Concert.
  (2) is more straightforward and allows us to be explicit about the events without creating a "throwaway" Concert object.


[IntelliJ IDEA Bug? 11:15am]
[ ] When introducing a variable for `concertWithEvents.concert()` in the following code:

    ```java
    model.addAttribute("projectedState", List.of(
                    "Artist: " + concertWithEvents.concert().artist(),
                    "Show Time: " + concertWithEvents.concert().showDateTime(),
                    "Doors Time: " + concertWithEvents.concert().doorsTime(),
                    "Tickets Remaining: " + concertWithEvents.concert().availableTicketCount()));
    ```

    it does not offer to name the variable, it just creates `concert` as the name and completes.


Thursday, April 24, 2025
========================

* When using `Model` in a test, we can't (as easily) assert on its contents, but when declaring the variable as a `ConcurrentModel`, which extends ConcurrentHashMap, AssertJ treats it as a Map, which is more convenient.


Wednesday, April 23, 2025
=========================

[Junie]
[ ] "Start again" implies that it will _start_, when really it's "edit the prompt".

[IntelliJ IDEA Bug]
[ ] Renamed a Thymeleaf template in a subdirectory and when it renamed it in the controller method's return value (view name), it dropped the subdirectory name: "event-viewer/concerts" became "concert-aggregates", which breaks the app.

[ ] If a method is @Deprecated, but is completely unused, would be nice if it showed that method as unused (grayed out)

[ ] When adding a (currently unused) field as a parameter to the constructor, it should bring up the "Change Signature" refactoring so we can do the change safely

Tuesday, April 22, 2025
=======================

[IntelliJ IDEA]
[ ] Multi-caret (Ctrl-G) no more occurrences not displaying?


Monday, April 21, 2025
======================

Next Time: generate TicketOrder with an ID that is used for the "ticket purchase confirmation" screen for the Customer

[Caution]
* Still easy to mix up newly created Aggregates: reconstituted from events (which results in empty uncommittedEvents) vs. registered via command (which results in a single event in uncommittedEvents), the latter which is required for saving.
  Unsure how to better protect against these kinds of mistakes: perhaps a createForTestWithEmptyUncommittedEvents() method on Customer (or whatever Aggregate)?

[IntelliJ IDEA: Feature]
[ ] Ability to exclude a replacement from the replace dialog (it's available in the replace tool window, so why not the dialog?)

[IntelliJ IDEA Bug]
[ ] Can't seem to use the Make Static refactoring on an extracted test setup helper method. Check to see if it's still broken in 2025.1. Check if issue was already filed?

[IntelliJ IDEA: Feature]
[ ] When moving (static) methods, would like to be able to move to a new static nested class (right now it tries to create a new package)

[IntelliJ IDEA: Bug?]
[X] Getting error trying to launch JUnit in 2025.1 release.


Monday, April 14, 2025
======================

[X] Next Time: tests against the purchaseTicketsUseCase that verify that uncommitted events from both Concert and Customer are generated


[Event-Sourcing]
* Concert can only generate ConcertEvents, and Customer can only generate CustomerEvents, so I can't assert (through ConcertTest) that the uncommitted events from Concert.purchaseTickets() generates a Customer-oriented TicketsPurchased event


Wednesday, April 9, 2025
========================

[Design Decision]
* For buying tickets, we don't think we need to load the Customer Aggregate, because Concert will generate the "TicketsReceived" event on the Customer's behalf

    * To display the ticket order confirmation, we load the Customer,
      then ask the Customer for the TicketOrder associated with the TicketOrderId

[IntelliJ IDEA Bug]
* F6 Move: when the method isn't static, it prompts to make static and THEN move, so makes it static, but then does NOT continue with the move operation

[Junie]
* What's the problem with the (default) IntelliJ Light theme that it complains about?

  > Current theme IntelliJ Light may not be supported by Junie. If you encounter any issues, please change to a default theme and reopen the project.


Tuesday, April 8, 2025
======================

[Junie]
* (reminder to post feedback on tests that fail that aren't Junie's fault, i.e., they weren't passing before)

[IntelliJ IDEA]
* Recognize in a Thymeleaf HTML template that the input field _does_ have a label, but the "for" is a TH: variable (see buy-tickets.html's form)


Monday, April 7, 2025
=====================

[Spring Framework]
* MockMvcTester without any Spring configuration will use the default InternalResourceViewResolver, which prevents "dispatch loops" that don't actually make sense for the resolver (Thymeleaf) we use in production, but it's too painful to manually wire the ThymeleafResolver. Perhaps can configure the UrlBasedViewResolver which doesn't care about dispatch loops?

[Heuristic]
* Projected read-models should have all the information needed to render a customer/user-facing view

* Following from the heuristic above, for ease of conversion we're adding the Aggregate's IDs to the event objects themselves instead of pulling them from the "wrapper/envelope" EventDto that already has the Aggregate's ID.
  Later on we can do more work in EventDto, since the DTO already has the ID, when converting from the DTO back into the event via enrichment (and not store the ID in the JSON blob), but that's an optimization: not having duplicate information in the JSON that's already in the event record/row.


Thursday, April 3, 2025
=======================

Next Time: Modify ConcertProjector so that it has all the details needed to render the list of concerts available for a customer to buy a ticket for, which means adding additional fields to the projector


[Design]
* {per @Suigi} To start, we'll create an in-memory Projector that always loops over all existing events in order to derive the information it needs to provide (e.g., which concerts are in the future and have tickets remaining)

    * All EventStore instances (we need a separate instance per Aggregate type) eventually share a single EventDto-Repository (through which all events will flow on their way to a database), which could provide a single place for Projectors to tap into (and could specify the event types they're interested in).

* Learned a lot about generics in making EventStore generic

[Junie Issue: Fixed]
* When asking a question (instead of having it do work), the answers ended up in a markdown file instead of in its chat area.


Wednesday, April 2, 2025
========================

Next Time: Deal with "find all concerts that we can buy tickets for" in the BuyTicketsUseCase

[Decision]
* Aggregates now have IDs that are of type UUIDv7 instead of Long, because we can't rely on the database to generate IDs as there's not a 1:1 relationship between rows/records in a table and the Aggregate Entities.
  IDs will be assigned upon the first creation event for each domain aggregate.
  Using type 7 UUIDs as they can be time-ordered, which is probably useful for events (since they must be correctly ordered).

* Interesting issues while generifying the ConcertStore: was able to get most of the way there, but the reconstitution of the object (e.g., Concert) needs to be externalized by a factory-like/functional method that takes the Events and converts them to the AGGREGATE

* For easier understanding, create two stores: one specific (without Generics) to a type (e.g., CustomerStore), and then one that is generified, e.g., Store<...> (which is where ConcertStore is heading)


Tuesday, April 1, 2025
======================

* Thought about pushing up to the base class, the apply-loop over events in the concrete subclass,
  but then we're running the apply method inside the super-constructor, which may cause issues
  (which may be "fixed" with the upcoming "flexible constructor bodies" JEP?)

* Instead of using switch+pattern matching for apply(), create dedicated (overloaded) apply methods for each concrete event type, however the dispatching of the events based on their concrete type would require either reflection or use of a switch anyway

[Alternative Implementation]
* Instead of a Use Case in the Application package, make self-contained Command objects that get executed by the boundary adapter


Monday, March 31, 2025
======================

* Two ways to create a Concert Aggregate Root:

  1. schedule (static factory method) -- could also be a separate Factory class, if we need more control (passing in dependencies to the aggregate root)

  2. reconstitute (apply events from the event store)

[Junie]
* When I asked it to add parameters to the Concert constructor, it did stuff and then wanted to run the ConcertTest to ensure everything is working. HOWEVER, it didn't check that this test was failing before and its changes might not have been enough to get it to pass—which would not have been Junie's fault!

[Junie]
* How to more easily reference line(s) of code in a specific file (e.g., a specific test method) when asking Junie to do something

[IntelliJ IDEA]
* Didn't offer to select the entire switch statement when doing Extract Method

* In "Commands Generate Events" tests, the SETUP creates events and uses reconstitute (does not itself call Commands)
