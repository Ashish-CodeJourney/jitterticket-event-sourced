package dev.ted.jitterticket;

import dev.ted.jitterticket.eventsourced.application.ConcertProjector;
import dev.ted.jitterticket.eventsourced.application.EventStore;
import dev.ted.jitterticket.eventsourced.application.PurchaseTicketsUseCase;
import dev.ted.jitterticket.eventsourced.domain.concert.Concert;
import dev.ted.jitterticket.eventsourced.domain.concert.ConcertEvent;
import dev.ted.jitterticket.eventsourced.domain.concert.ConcertId;
import dev.ted.jitterticket.eventsourced.domain.customer.Customer;
import dev.ted.jitterticket.eventsourced.domain.customer.CustomerEvent;
import dev.ted.jitterticket.eventsourced.domain.customer.CustomerId;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.UUID;

@Configuration
public class TixConfiguration {

    @Bean
    PurchaseTicketsUseCase purchaseTicketsUseCase(EventStore<CustomerId, CustomerEvent, Customer> customerStore,
                                                  EventStore<ConcertId, ConcertEvent, Concert> concertStore) {
        return new PurchaseTicketsUseCase(concertStore, customerStore);
    }


    @Bean
    public EventStore<CustomerId, CustomerEvent, Customer> customerStore() {
        var customerStore = EventStore.forCustomers();
        customerStore.save(Customer.register(
                new CustomerId(UUID.fromString("68f5b2c2-d70d-4992-ad78-c94809ae9a6a")),
                "Sample Customer", "sample@example.com"));
        return customerStore;
    }

    @Bean
    public EventStore<ConcertId, ConcertEvent, Concert> concertStore() {
        var concertStore = EventStore.forConcerts();
        addSonicWavesConcertTo(concertStore);
        // rest of data generated by my good friend Junie
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Midnight Rebels",
                55,
                LocalDateTime.of(2025, 9, 15, 21, 0),
                LocalTime.of(20, 0),
                150,
                4));

// Example 2: Jazz ensemble with limited capacity
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Blue Note Quartet",
                35,
                LocalDateTime.of(2025, 8, 22, 19, 30),
                LocalTime.of(18, 30),
                75,
                2));

// Example 3: Popular pop artist with higher capacity
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Stella Nova",
                65,
                LocalDateTime.of(2025, 10, 5, 20, 0),
                LocalTime.of(18, 30),
                250,
                6));

// Example 4: Indie folk band with afternoon show
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Woodland Echoes",
                30,
                LocalDateTime.of(2025, 7, 12, 16, 0),
                LocalTime.of(15, 0),
                120,
                4));

// Example 5: Electronic music DJ with late night show
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Pulse Wave",
                40,
                LocalDateTime.of(2025, 11, 8, 22, 30),
                LocalTime.of(21, 0),
                180,
                5));

// Example 6: Classical orchestra
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Metropolitan Symphony",
                70,
                LocalDateTime.of(2025, 12, 20, 19, 0),
                LocalTime.of(18, 0),
                200,
                3));

// Example 7: Alternative rock band
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Cosmic Drift",
                45,
                LocalDateTime.of(2026, 1, 17, 20, 0),
                LocalTime.of(19, 0),
                130,
                4));

// Example 8: Hip-hop artist
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Lyrical Storm",
                50,
                LocalDateTime.of(2025, 9, 30, 21, 0),
                LocalTime.of(19, 30),
                175,
                4));

        // h/t sadukie
        concertStore.save(Concert.schedule(
                ConcertId.createRandom(),
                "Jagged Arrays",
                50,
                LocalDateTime.of(2025, 10, 3, 20, 0),
                LocalTime.of(19, 0),
                150,
                6));
        return concertStore;
    }

    private static void addSonicWavesConcertTo(EventStore<ConcertId, ConcertEvent, Concert> concertStore) {
        ConcertId sonicWavesConcertId = ConcertId.createRandom();

        Concert sonicWavesConcert = Concert.schedule(
                sonicWavesConcertId,
                "The Sonic Waves",
                45,
                LocalDateTime.of(2025, 7, 26, 20, 0),
                LocalTime.of(19, 0),
                100,
                4);

        sonicWavesConcert.rescheduleTo(
                LocalDateTime.of(2025, 8, 2, 21, 0),
                LocalTime.of(20, 0));

        sonicWavesConcert.sellTicketsTo(CustomerId.createRandom(), 10);
        sonicWavesConcert.sellTicketsTo(CustomerId.createRandom(), 5);

        concertStore.save(sonicWavesConcert);
    }

    @Bean
    public ConcertProjector concertProjector(EventStore<ConcertId, ConcertEvent, Concert> concertStore) {
        return new ConcertProjector(concertStore);
    }

}
