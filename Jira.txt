# Simplifying Assumptions

    * Ticket purchases don't require payment information (payments "always succeed")
    * Little contention for tickets (no waiting room)
    * No Auth (supply your own CustomerID!)

# To Do

[X] Check the EventDtoTest to ensure it's finding all of the concrete (record) events for the "parameterized" test

[X] Rename buy/bought to purchase/purchased

* concert.purchaseTickets() needs to generate two (3?) events
    [ ] 1. [Concert aggregate stream] TicketsSold(concertId, customerId, ...)
        [ ] (DEFER until we need it for the Concert Sales projector.)
            Implement the total paid (dollar amount) -- would be used for a projection of concert total sales
    [X] 2. [Customer aggregate stream] TicketsPurchased(customerId, concertId, ticketOrderId??...)
    ?? (don't think I need this) [Customer aggregate stream for orders] TicketsOrdered(...purchaseId)

[X] Add TicketOrderId to the TicketPurchased event (was concert.purchaseTickets() needs to return the TicketOrderId)

[ ] Complete the customer purchase confirmation screen
    [ ] Redirect (after POST to purchase tickets) to new endpoint:
    [ ] New endpoint for /customers/{customerId}/ticket-orders/{ticketOrderId}
        [ ] Load Customer, Load Concert => TicketOrderView
