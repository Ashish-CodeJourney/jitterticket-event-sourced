# Simplifying Assumptions

    * Ticket purchases don't require payment information (payments "always succeed")
    * Little contention for tickets (no waiting room)
    * No Auth (supply your own CustomerID!)

# To Do

[ ] Time-travel event viewer
    [X] Show all Concerts, select a specific one to see its event stream history
        [X] In reverse chronological (event) order
    [X] Show state of the Aggregate
    [X] Show state as of a specific ("selected"?) event - defaults to most recent
        [X] Add selected event ID to the show events URL as a Query Param
        [X] Clicking on an event moves the "current" pointer to that event
        [X] Create a sublist of the events up to (and including) the selected event, then reconstitute the aggregate from the sublist
    [ ] Generalize to events for any Aggregate type for a specific Agg ID

[X] EventSourcedAggregate.uncommittedEvents() returns the internal mutable list! At least return a copy (preferably an unmodifiable List, or perhaps just a Stream)

[X] Check the EventDtoTest to ensure it's finding all of the concrete (record) events for the "parameterized" test

[X] Rename buy/bought to purchase/purchased

* concert.purchaseTickets() needs to generate two (3?) events
    [ ] 1. [Concert aggregate stream] TicketsSold(concertId, customerId, ...)
        [ ] (DEFER until we need it for the Concert Sales projector.)
            Implement the total paid (dollar amount) -- would be used for a projection of concert total sales
    [X] 2. [Customer aggregate stream] TicketsPurchased(customerId, concertId, ticketOrderId??...)
    ?? (don't think I need this) [Customer aggregate stream for orders] TicketsOrdered(...purchaseId)

[X] Add TicketOrderId to the TicketPurchased event (was concert.purchaseTickets() needs to return the TicketOrderId)

[X] Complete the customer purchase confirmation screen
    [X] Redirect (after POST to purchase tickets) to new endpoint:
    [X] New endpoint for /customers/{customerId}/confirmations/{ticketOrderId}
        [X] Load Customer, Load Concert => TicketOrderView
